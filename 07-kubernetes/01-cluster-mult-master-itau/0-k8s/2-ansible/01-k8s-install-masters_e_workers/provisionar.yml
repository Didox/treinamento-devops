- hosts:
  - ec2-k8s-proxy
  handlers:
    - name: "restart haproxy"
      service:
        name: haproxy
        state: restarted
      become: yes

  tasks:
    - name: "Configura hostname haproxy"
      shell: hostname k8s-proxy && echo "k8s-proxy" > /etc/hostname
      become: yes
    
    - name: "Roda: sudo apt-get update"
      become: yes
      apt:
        upgrade: yes
        update_cache: yes
        cache_valid_time: 86400 #Um dia

    - name: "Instala pacotes"
      apt:
        name: "{{ item }}"
        state: latest
      become: yes # roda com sudo
      with_items:
        - haproxy

    - name: "Trocando haproxy"
      copy:
        src: "haproxy/haproxy.cfg"
        dest: "/etc/haproxy/haproxy.cfg"
      become: yes
      notify:
        - "restart haproxy"
# ---
- hosts:
  - ec2-k8s-m1
  tasks:
    - name: "Configura hostname k8s-master"
      shell: hostname k8s-master-1 && echo "k8s-master-1" > /etc/hostname
      become: yes
# ---
- hosts:
  - ec2-k8s-m2
  tasks:
    - name: "Configura hostname k8s-master"
      shell: hostname k8s-master-2 && echo "k8s-master-2" > /etc/hostname
      become: yes
# ---
- hosts:
  - ec2-k8s-m3
  tasks:
    - name: "Configura hostname k8s-master"
      shell: hostname k8s-master-3 && echo "k8s-master-3" > /etc/hostname
      become: yes
# ---
- hosts:
  - ec2-k8s-w1
  tasks:
    - name: "Configura hostname k8s-workers"
      shell: hostname k8s-workers-1 && echo "k8s-workers-1" > /etc/hostname
      become: yes
# ---
- hosts:
  - ec2-k8s-w2
  tasks:
    - name: "Configura hostname k8s-workers"
      shell: hostname k8s-workers-2 && echo "k8s-workers-2" > /etc/hostname
      become: yes
# ---
- hosts:
  - ec2-k8s-w3
  tasks:
    - name: "Configura hostname k8s-workers"
      shell: hostname k8s-workers-3 && echo "k8s-workers-3" > /etc/hostname
      become: yes
# ---
- hosts:
  - ec2-k8s-m1
  - ec2-k8s-m3
  - ec2-k8s-m2
  - ec2-k8s-w1
  - ec2-k8s-w2
  - ec2-k8s-w3

  tasks:
    - name: install packages required by docker
      become: true
      apt:
        update_cache: yes
        state: latest
        name:
        - apt-transport-https
        - ca-certificates
        - curl
        - gpg-agent
        - software-properties-common

    - name: add docker GPG key
      become: true
      apt_key:
        url: https://download.docker.com/linux/ubuntu/gpg
        state: present

    - name: add docker apt repo
      become: true
      apt_repository:
        repo: deb https://download.docker.com/linux/ubuntu bionic stable
        state: present

    - name: install docker
      become: true
      apt:
        update_cache: yes
        state: latest
        name:
        - docker-ce
        - docker-ce-cli
        - containerd.io

    - name: "Corrigindo docker para o kubernetes"
      copy:
        src: "docker/daemon.json"
        dest: "/etc/docker/daemon.json"
      become: yes

    - name: "Restart docker"
      shell: sudo systemctl daemon-reload && sudo systemctl restart docker # && sudo systemctl restart kubelet
      become: yes

    - name: Remove swapfile from /etc/fstab
      mount:
        name: "{{ item }}"
        fstype: swap
        state: absent
      with_items:
        - swap
        - none

    - name: Disable swap
      command: swapoff -a
      when: ansible_swaptotal_mb > 0

    - name: Add an apt signing key for Kubernetes
      become: true
      apt_key:
        url: https://packages.cloud.google.com/apt/doc/apt-key.gpg
        state: present

    - name: Adding apt repository for Kubernetes
      become: true
      apt_repository:
        repo: deb https://apt.kubernetes.io/ kubernetes-xenial main
        state: present
        filename: kubernetes.list

    - name: Install Kubernetes binaries
      become: true
      apt: 
        name: "{{ packages }}"
        state: present
        update_cache: yes
      vars:
        packages:
          - kubelet 
          - kubeadm 
          - kubectl

    - name: Restart kubelet
      become: true
      service:
        name: kubelet
        daemon_reload: yes
        state: restarted

    - name: "Host para o haproxy"
      copy:
        src: "host/hosts"
        dest: "/etc/hosts"
      become: yes
# ---
- hosts:
  - ec2-k8s-m1
  become: yes
  tasks:    
    - name: "Reset cluster"
      shell: "kubeadm reset -f"

    - shell: "kubeadm init --control-plane-endpoint 'k8s-haproxy:6443' --upload-certs"
      register: ps
    - debug:
        msg: " '{{ ps.stdout_lines }}' "

    - name: "Colocando no path da maquina o conf do kubernetes"
      shell: "mkdir -p $HOME/.kube && sudo cp -f /etc/kubernetes/admin.conf $HOME/.kube/config && sudo chown $(id -u):$(id -g) $HOME/.kube/config && export KUBECONFIG=/etc/kubernetes/admin.conf"

  
  

# # ansible-playbook -i hosts provisionar.yml -u ubuntu --private-key ~/Desktop/devops/treinamentoItau
# # ssh -i ~/Desktop/devops/treinamentoItau ubuntu@ec2-54-174-235-197.compute-1.amazonaws.com
# # ssh -i ~/Desktop/devops/treinamentoItau ubuntu@ec2-50-16-162-135.compute-1.amazonaws.com
# # ssh -i ~/Desktop/devops/treinamentoItau ubuntu@ec2-54-173-115-181.compute-1.amazonaws.com

# # *** verifica log error
# # vim /etc/haproxy/haproxy.cfg
# # systemctl restart haproxy
# # systemctl status haproxy.service
# # tail -f /var/log/haproxy.log

# # tail -f /var/log/nginx/error.log

# ansible-playbook -i hosts provisionar.yml -u ubuntu --private-key ~/Desktop/devops/treinamentoItau
# ssh -i ~/Desktop/devops/treinamentoItau ubuntu@ec2-54-152-41-46.compute-1.amazonaws.com
# systemctl status haproxy | less

